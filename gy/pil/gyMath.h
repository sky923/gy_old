#ifndef _core_mvMath_h_
#define _core_mvMath_h_

#include "glm/glm.hpp"
#include "glm/ext.hpp"
#include "gyAtomicDataType.h"

namespace gy
{
	namespace math
	{
		using glm::detail::tvec2;
		typedef tvec2<bool> vec2b;
		typedef tvec2<int8> vec2i8;
		typedef tvec2<int16> vec2i16;
		typedef tvec2<int32> vec2i32;
		typedef tvec2<int64> vec2i64;
		typedef tvec2<int> vec2i;
		typedef tvec2<uint8> vec2u8;
		typedef tvec2<uint16> vec2u16;
		typedef tvec2<uint32> vec2u32;
		typedef tvec2<uint64> vec2u64;
		typedef tvec2<uint> vec2u;
		typedef tvec2<float> vec2f;
		typedef tvec2<double> vec2d;
		typedef vec2f vec2;

		using glm::detail::tvec3;
		typedef tvec3<bool> vec3b;
		typedef tvec3<int8> vec3i8;
		typedef tvec3<int16> vec3i16;
		typedef tvec3<int32> vec3i32;
		typedef tvec3<int64> vec3i64;
		typedef tvec3<int> vec3i;
		typedef tvec3<uint8> vec3u8;
		typedef tvec3<uint16> vec3u16;
		typedef tvec3<uint32> vec3u32;
		typedef tvec3<uint64> vec3u64;
		typedef tvec3<uint> vec3u;
		typedef tvec3<float> vec3f;
		typedef tvec3<double> vec3d;
		typedef vec3f vec3;

		using glm::detail::tvec4;
		typedef tvec4<bool> vec4b;
		typedef tvec4<int8> vec4i8;
		typedef tvec4<int16> vec4i16;
		typedef tvec4<int32> vec4i32;
		typedef tvec4<int64> vec4i64;
		typedef tvec4<int> vec4i;
		typedef tvec4<uint8> vec4u8;
		typedef tvec4<uint16> vec4u16;
		typedef tvec4<uint32> vec4u32;
		typedef tvec4<uint64> vec4u64;
		typedef tvec4<uint> vec4u;
		typedef tvec4<float> vec4f;
		typedef tvec4<double> vec4d;
		typedef vec4f vec4;

		using glm::detail::tquat;
		typedef tquat<bool> quatb;
		typedef tquat<int8> quati8;
		typedef tquat<int16> quati16;
		typedef tquat<int32> quati32;
		typedef tquat<int64> quati64;
		typedef tquat<int> quati;
		typedef tquat<uint8> quatu8;
		typedef tquat<uint16> quatu16;
		typedef tquat<uint32> quatu32;
		typedef tquat<uint64> quatu64;
		typedef tquat<uint> quatu;
		typedef tquat<float> quatf;
		typedef tquat<double> quatd;
		typedef quatf quat;

		using glm::detail::tmat2x2;
		typedef tmat2x2<bool> mat2x2b;
		typedef tmat2x2<int8> mat2x2i8;
		typedef tmat2x2<int16> mat2x2i16;
		typedef tmat2x2<int32> mat2x2i32;
		typedef tmat2x2<int64> mat2x2i64;
		typedef tmat2x2<int> mat2x2i;
		typedef tmat2x2<uint8> mat2x2u8;
		typedef tmat2x2<uint16> mat2x2u16;
		typedef tmat2x2<uint32> mat2x2u32;
		typedef tmat2x2<uint64> mat2x2u64;
		typedef tmat2x2<uint> mat2x2u;
		typedef tmat2x2<float> mat2x2f;
		typedef tmat2x2<double> mat2x2d;
		typedef mat2x2f mat2x2;

		typedef mat2x2b mat2b;
		typedef mat2x2i8 mat2i8;
		typedef mat2x2i16 mat2i16;
		typedef mat2x2i32 mat2i32;
		typedef mat2x2i64 mat2i64;
		typedef mat2x2i mat2i;
		typedef mat2x2u8 mat2u8;
		typedef mat2x2u16 mat2u16;
		typedef mat2x2u32 mat2u32;
		typedef mat2x2u64 mat2u64;
		typedef mat2x2u mat2u;
		typedef mat2x2f mat2f;
		typedef mat2x2d mat2d;
		typedef mat2f mat2;

		using glm::detail::tmat2x3;
		typedef tmat2x3<bool> mat2x3b;
		typedef tmat2x3<int8> mat2x3i8;
		typedef tmat2x3<int16> mat2x3i16;
		typedef tmat2x3<int32> mat2x3i32;
		typedef tmat2x3<int64> mat2x3i64;
		typedef tmat2x3<int> mat2x3i;
		typedef tmat2x3<uint8> mat2x3u8;
		typedef tmat2x3<uint16> mat2x3u16;
		typedef tmat2x3<uint32> mat2x3u32;
		typedef tmat2x3<uint64> mat2x3u64;
		typedef tmat2x3<uint> mat2x3u;
		typedef tmat2x3<float> mat2x3f;
		typedef tmat2x3<double> mat2x3d;
		typedef mat2x3f mat2x3;

		using glm::detail::tmat2x4;
		typedef tmat2x4<bool> mat2x4b;
		typedef tmat2x4<int8> mat2x4i8;
		typedef tmat2x4<int16> mat2x4i16;
		typedef tmat2x4<int32> mat2x4i32;
		typedef tmat2x4<int64> mat2x4i64;
		typedef tmat2x4<int> mat2x4i;
		typedef tmat2x4<uint8> mat2x4u8;
		typedef tmat2x4<uint16> mat2x4u16;
		typedef tmat2x4<uint32> mat2x4u32;
		typedef tmat2x4<uint64> mat2x4u64;
		typedef tmat2x4<uint> mat2x4u;
		typedef tmat2x4<float> mat2x4f;
		typedef tmat2x4<double> mat2x4d;
		typedef mat2x4f mat2x4;

		using glm::detail::tmat3x2;
		typedef tmat3x2<bool> mat3x2b;
		typedef tmat3x2<int8> mat3x2i8;
		typedef tmat3x2<int16> mat3x2i16;
		typedef tmat3x2<int32> mat3x2i32;
		typedef tmat3x2<int64> mat3x2i64;
		typedef tmat3x2<int> mat3x2i;
		typedef tmat3x2<uint8> mat3x2u8;
		typedef tmat3x2<uint16> mat3x2u16;
		typedef tmat3x2<uint32> mat3x2u32;
		typedef tmat3x2<uint64> mat3x2u64;
		typedef tmat3x2<uint> mat3x2u;
		typedef tmat3x2<float> mat3x2f;
		typedef tmat3x2<double> mat3x2d;
		typedef mat3x2f mat3x2;

		using glm::detail::tmat3x3;
		typedef tmat3x3<bool> mat3x3b;
		typedef tmat3x3<int8> mat3x3i8;
		typedef tmat3x3<int16> mat3x3i16;
		typedef tmat3x3<int32> mat3x3i32;
		typedef tmat3x3<int64> mat3x3i64;
		typedef tmat3x3<int> mat3x3i;
		typedef tmat3x3<uint8> mat3x3u8;
		typedef tmat3x3<uint16> mat3x3u16;
		typedef tmat3x3<uint32> mat3x3u32;
		typedef tmat3x3<uint64> mat3x3u64;
		typedef tmat3x3<uint> mat3x3u;
		typedef tmat3x3<float> mat3x3f;
		typedef tmat3x3<double> mat3x3d;
		typedef mat3x3f mat3x3;

		typedef mat3x3b mat3b;
		typedef mat3x3i8 mat3i8;
		typedef mat3x3i16 mat3i16;
		typedef mat3x3i32 mat3i32;
		typedef mat3x3i64 mat3i64;
		typedef mat3x3i mat3i;
		typedef mat3x3u8 mat3u8;
		typedef mat3x3u16 mat3u16;
		typedef mat3x3u32 mat3u32;
		typedef mat3x3u64 mat3u64;
		typedef mat3x3u mat3u;
		typedef mat3x3f mat3f;
		typedef mat3x3d mat3d;
		typedef mat3f mat3;

		using glm::detail::tmat3x4;
		typedef tmat3x4<bool> mat3x4b;
		typedef tmat3x4<int8> mat3x4i8;
		typedef tmat3x4<int16> mat3x4i16;
		typedef tmat3x4<int32> mat3x4i32;
		typedef tmat3x4<int64> mat3x4i64;
		typedef tmat3x4<int> mat3x4i;
		typedef tmat3x4<uint8> mat3x4u8;
		typedef tmat3x4<uint16> mat3x4u16;
		typedef tmat3x4<uint32> mat3x4u32;
		typedef tmat3x4<uint64> mat3x4u64;
		typedef tmat3x4<uint> mat3x4u;
		typedef tmat3x4<float> mat3x4f;
		typedef tmat3x4<double> mat3x4d;
		typedef mat3x4f mat3x4;

		using glm::detail::tmat4x2;
		typedef tmat4x2<bool> mat4x2b;
		typedef tmat4x2<int8> mat4x2i8;
		typedef tmat4x2<int16> mat4x2i16;
		typedef tmat4x2<int32> mat4x2i32;
		typedef tmat4x2<int64> mat4x2i64;
		typedef tmat4x2<int> mat4x2i;
		typedef tmat4x2<uint8> mat4x2u8;
		typedef tmat4x2<uint16> mat4x2u16;
		typedef tmat4x2<uint32> mat4x2u32;
		typedef tmat4x2<uint64> mat4x2u64;
		typedef tmat4x2<uint> mat4x2u;
		typedef tmat4x2<float> mat4x2f;
		typedef tmat4x2<double> mat4x2d;
		typedef mat4x2f mat4x2;

		using glm::detail::tmat4x3;
		typedef tmat4x3<bool> mat4x3b;
		typedef tmat4x3<int8> mat4x3i8;
		typedef tmat4x3<int16> mat4x3i16;
		typedef tmat4x3<int32> mat4x3i32;
		typedef tmat4x3<int64> mat4x3i64;
		typedef tmat4x3<int> mat4x3i;
		typedef tmat4x3<uint8> mat4x3u8;
		typedef tmat4x3<uint16> mat4x3u16;
		typedef tmat4x3<uint32> mat4x3u32;
		typedef tmat4x3<uint64> mat4x3u64;
		typedef tmat4x3<uint> mat4x3u;
		typedef tmat4x3<float> mat4x3f;
		typedef tmat4x3<double> mat4x3d;
		typedef mat4x3f mat4x3;

		using glm::detail::tmat4x4;
		typedef tmat4x4<bool> mat4x4b;
		typedef tmat4x4<int8> mat4x4i8;
		typedef tmat4x4<int16> mat4x4i16;
		typedef tmat4x4<int32> mat4x4i32;
		typedef tmat4x4<int64> mat4x4i64;
		typedef tmat4x4<int> mat4x4i;
		typedef tmat4x4<uint8> mat4x4u8;
		typedef tmat4x4<uint16> mat4x4u16;
		typedef tmat4x4<uint32> mat4x4u32;
		typedef tmat4x4<uint64> mat4x4u64;
		typedef tmat4x4<uint> mat4x4u;
		typedef tmat4x4<float> mat4x4f;
		typedef tmat4x4<double> mat4x4d;
		typedef mat4x4f mat4x4;

		typedef mat4x4b mat4b;
		typedef mat4x4i8 mat4i8;
		typedef mat4x4i16 mat4i16;
		typedef mat4x4i32 mat4i32;
		typedef mat4x4i64 mat4i64;
		typedef mat4x4i mat4i;
		typedef mat4x4u8 mat4u8;
		typedef mat4x4u16 mat4u16;
		typedef mat4x4u32 mat4u32;
		typedef mat4x4u64 mat4u64;
		typedef mat4x4u mat4u;
		typedef mat4x4f mat4f;
		typedef mat4x4d mat4d;
		typedef mat4f mat4;

		typedef vec2i point2i;
		typedef vec2f point2f;
		typedef vec2i size2i;
		typedef vec2f size2f;
		typedef vec3i8 c3i8;
		typedef vec3i16 c3i16;
		typedef vec3i32 c3i32;
		typedef vec3u8 c3u8;
		typedef vec3u16 c3u16;
		typedef vec3u32 c3u32;
		typedef vec3f c3f;
		typedef vec4i8 c4i8;
		typedef vec4i16 c4i16;
		typedef vec4i32 c4i32;
		typedef vec4u8 c4u8;
		typedef vec4u16 c4u16;
		typedef vec4u32 c4u32;
		typedef vec4f c4f;

		const vec2 vec2_00(0, 0);
		const vec2 vec2_10(1, 0);
		const vec2 vec2_01(0, 1);
		const vec2 vec2_11(1, 1);
		const vec2 vec2_max(FLT_MAX, FLT_MAX);
		const vec2 vec2_min(FLT_MIN, FLT_MIN);
		const point2i point2i_00(0, 0);
		const point2i point2i_10(1, 0);
		const point2i point2i_01(0, 1);
		const point2i point2i_11(1, 1);
		const point2i point2i_max(INT_MAX, INT_MAX);
		const point2i point2i_min(INT_MIN, INT_MIN);
		const point2f point2f_00(0, 0);
		const point2f point2f_10(1, 0);
		const point2f point2f_01(0, 1);
		const point2f point2f_11(1, 1);
		const point2f point2f_M0(FLT_MAX, 0);
		const point2f point2f_0M(0, FLT_MAX);
		const point2f point2f_MM(FLT_MAX, FLT_MAX);
		const point2f point2f_m0(FLT_MIN, 0);
		const point2f point2f_0m(0, FLT_MIN);
		const point2f point2f_mm(FLT_MIN, FLT_MIN);
		const point2f point2f_max(FLT_MAX, FLT_MAX);
		const point2f point2f_min(FLT_MIN, FLT_MIN);
		const size2i size2i_00(0, 0);
		const size2i size2i_10(1, 0);
		const size2i size2i_01(0, 1);
		const size2i size2i_11(1, 1);
		const size2i size2i_m0(INT_MIN, 0);
		const size2i size2i_0m(0, INT_MIN);
		const size2i size2i_M0(INT_MAX, 0);
		const size2i size2i_0M(0, INT_MAX);
		const size2i size2i_max(INT_MAX, INT_MAX);
		const size2i size2i_min(INT_MIN, INT_MIN);
		const size2f size2f_00(0, 0);
		const size2f size2f_10(1, 0);
		const size2f size2f_01(0, 1);
		const size2f size2f_11(1, 1);
		const size2f size2f_M0(1, 0);
		const size2f size2f_0M(0, 1);
		const size2f size2f_MM(1, 1);
		const size2f size2f_max(1, 1);
		const size2f size2f_min(0, 0);
		const vec3 vec3_000(0, 0, 0);
		const vec3 vec3_100(1, 0, 0);
		const vec3 vec3_010(0, 1, 0);
		const vec3 vec3_001(0, 0, 1);
		const vec3 vec3_111(1, 1, 1);
		const vec3 vec3_max(FLT_MAX, FLT_MAX, FLT_MAX);
		const vec3 vec3_min(FLT_MIN, FLT_MIN, FLT_MIN);
		const c3u8 c3u8_000(0, 0, 0);
		const c3u8 c3u8_100(1, 0, 0);
		const c3u8 c3u8_010(0, 1, 0);
		const c3u8 c3u8_001(0, 0, 1);
		const c3u8 c3u8_111(1, 1, 1);
		const c3u8 c3u8_M00(UINT8_MAX, 0, 0);
		const c3u8 c3u8_0M0(0, UINT8_MAX, 0);
		const c3u8 c3u8_00M(0, 0, UINT8_MAX);
		const c3u8 c3u8_MMM(UINT8_MAX, UINT8_MAX, UINT8_MAX);
		const c3u8 c3u8_max(UINT8_MAX, UINT8_MAX, UINT8_MAX);
		const c3u8 c3u8_min(0, 0, 0);
		const c3u16 c3u16_000(0, 0, 0);
		const c3u16 c3u16_100(1, 0, 0);
		const c3u16 c3u16_010(0, 1, 0);
		const c3u16 c3u16_001(0, 0, 1);
		const c3u16 c3u16_111(1, 1, 1);
		const c3u16 c3u16_M00(UINT16_MAX, 0, 0);
		const c3u16 c3u16_0M0(0, UINT16_MAX, 0);
		const c3u16 c3u16_00M(0, 0, UINT16_MAX);
		const c3u16 c3u16_MMM(UINT16_MAX, UINT16_MAX, UINT16_MAX);
		const c3u16 c3u16_max(UINT16_MAX, UINT16_MAX, UINT16_MAX);
		const c3u16 c3u16_min(0, 0, 0);
		const c3u32 c3u32_000(0, 0, 0);
		const c3u32 c3u32_100(1, 0, 0);
		const c3u32 c3u32_010(0, 1, 0);
		const c3u32 c3u32_001(0, 0, 1);
		const c3u32 c3u32_111(1, 1, 1);
		const c3u32 c3u32_M00(UINT32_MAX, 0, 0);
		const c3u32 c3u32_0M0(0, UINT32_MAX, 0);
		const c3u32 c3u32_00M(0, 0, UINT32_MAX);
		const c3u32 c3u32_MMM(UINT32_MAX, UINT32_MAX, UINT32_MAX);
		const c3u32 c3u32_max(UINT32_MAX, UINT32_MAX, UINT32_MAX);
		const c3u32 c3u32_min(0, 0, 0);
		const c3f c3f_000(0, 0, 0);
		const c3f c3f_100(1, 0, 0);
		const c3f c3f_010(0, 1, 0);
		const c3f c3f_001(0, 0, 1);
		const c3f c3f_111(1, 1, 1);
		const c3f c3f_M00(1, 0, 0);
		const c3f c3f_0M0(0, 1, 0);
		const c3f c3f_00M(0, 0, 1);
		const c3f c3f_MMM(1, 1, 1);
		const c3f c3f_max(1, 1, 1);
		const c3f c3f_min(0, 0, 0);
		const vec4 vec4_0000(0, 0, 0, 0);
		const vec4 vec4_1000(1, 0, 0, 0);
		const vec4 vec4_0100(0, 1, 0, 0);
		const vec4 vec4_0010(0, 0, 1, 0);
		const vec4 vec4_0001(0, 0, 0, 1);
		const vec4 vec4_1111(1, 1, 1, 1);
		const vec4 vec4_max(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX);
		const vec4 vec4_min(FLT_MIN, FLT_MIN, FLT_MIN, FLT_MIN);
		const c4u8 c4u8_0000(0, 0, 0, 0);
		const c4u8 c4u8_1000(1, 0, 0, 0);
		const c4u8 c4u8_0100(0, 1, 0, 0);
		const c4u8 c4u8_0010(0, 0, 1, 0);
		const c4u8 c4u8_0001(0, 0, 0, 1);
		const c4u8 c4u8_1111(1, 1, 1, 1);
		const c4u8 c4u8_M000(UINT8_MAX, 0, 0, 0);
		const c4u8 c4u8_0M00(0, UINT8_MAX, 0, 0);
		const c4u8 c4u8_00M0(0, 0, UINT8_MAX, 0);
		const c4u8 c4u8_000M(0, 0, 0, UINT8_MAX);
		const c4u8 c4u8_MMMM(UINT8_MAX, UINT8_MAX, UINT8_MAX, UINT8_MAX);
		const c4u8 c4u8_max(UINT8_MAX, UINT8_MAX, UINT8_MAX, UINT8_MAX);
		const c4u8 c4u8_min(0, 0, 0, 0);
		const c4u16 c4u16_0000(0, 0, 0, 0);
		const c4u16 c4u16_1000(1, 0, 0, 0);
		const c4u16 c4u16_0100(0, 1, 0, 0);
		const c4u16 c4u16_0010(0, 0, 1, 0);
		const c4u16 c4u16_1111(1, 1, 1, 1);
		const c4u16 c4u16_M000(UINT16_MAX, 0, 0, 0);
		const c4u16 c4u16_0M00(0, UINT16_MAX, 0, 0);
		const c4u16 c4u16_00M0(0, 0, UINT16_MAX, 0);
		const c4u16 c4u16_MMMM(UINT16_MAX, UINT16_MAX, UINT16_MAX, UINT16_MAX);
		const c4u16 c4u16_max(UINT16_MAX, UINT16_MAX, UINT16_MAX, UINT16_MAX);
		const c4u16 c4u16_min(0, 0, 0, 0);
		const c4u32 c4u32_0000(0, 0, 0, 0);
		const c4u32 c4u32_1000(1, 0, 0, 0);
		const c4u32 c4u32_0100(0, 1, 0, 0);
		const c4u32 c4u32_0010(0, 0, 1, 0);
		const c4u32 c4u32_1111(1, 1, 1, 1);
		const c4u32 c4u32_M000(UINT32_MAX, 0, 0, 0);
		const c4u32 c4u32_0M00(0, UINT32_MAX, 0, 0);
		const c4u32 c4u32_00M0(0, 0, UINT32_MAX, 0);
		const c4u32 c4u32_MMMM(UINT32_MAX, UINT32_MAX, UINT32_MAX, UINT32_MAX);
		const c4u32 c4u32_max(UINT32_MAX, UINT32_MAX, UINT32_MAX, UINT32_MAX);
		const c4u32 c4u32_min(0, 0, 0, 0);
		const c4f c4f_0000(0, 0, 0, 0);
		const c4f c4f_1000(1, 0, 0, 0);
		const c4f c4f_0100(0, 1, 0, 0);
		const c4f c4f_0010(0, 0, 1, 0);
		const c4f c4f_0001(0, 0, 0, 1);
		const c4f c4f_1111(1, 1, 1, 1);
		const c4f c4f_m000(1, 0, 0, 0);
		const c4f c4f_0m00(0, 1, 0, 0);
		const c4f c4f_00m0(0, 0, 1, 0);
		const c4f c4f_000m(0, 0, 0, 1);
		const c4f c4f_mmmm(1, 1, 1, 1);
		const c4f c4f_max(1, 1, 1, 1);
		const c4f c4f_min(0, 0, 0, 0);

		// functions
		using glm::ortho;
		using glm::cross;
		using glm::perspective;
		using glm::perspectiveFov;
		using glm::translate;
		using glm::rotate;
		using glm::scale;
		using glm::inverse;
		using glm::inverseTranspose;
		using glm::transpose;
		using glm::distance;
		using glm::distance2;
		using glm::fastAcos;
		using glm::fastAsin;
		using glm::fastAtan;
		using glm::fastCos;
		using glm::fastSin;
		using glm::fastTan;
		using glm::fastDistance;
		using glm::fastExp;
		using glm::fastExp2;
		using glm::fastSqrt;
		using glm::fastInverseSqrt;
		using glm::fastLength;
		using glm::fastLn;
		using glm::fastLog;
		using glm::fastLog2;
		using glm::fastMix;
		using glm::fastPow;
		using glm::fastNormalize;
		using glm::fastNormalizeDot;
	}
}
#endif //_core_mvMath_h_
